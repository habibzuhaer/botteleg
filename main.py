import ccxt
import os
import asyncio
import logging
from datetime import datetime, timezone, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Termux
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
BYBIT_API_KEY = os.getenv('BYBIT_API_KEY', '')
BYBIT_API_SECRET = os.getenv('BYBIT_API_SECRET', '')

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è Termux (–º–µ–Ω—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∞)
SYMBOLS = {
    'SUI': 'SUI/USDT:USDT',
    'ETH': 'ETH/USDT:USDT',
    'BNB': 'BNB/USDT:USDT',
    'SOL': 'SOL/USDT:USDT',
    'SEI': 'SEI/USDT:USDT',
    'ADA': 'ADA/USDT:USDT',
    'JUP': 'JUP/USDT:USDT',
}

TIMEFRAME = '15m'
MIN_PERCENT_CHANGE = 1.67
CHECK_INTERVAL = 60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è Termux
MIN_MESSAGE_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ—Ö–æ–∂–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
# ===============================================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Termux
exchange = ccxt.bybit({
    'apiKey': BYBIT_API_KEY,
    'secret': BYBIT_API_SECRET,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'swap',
        'adjustForTimeDifference': True,  # –í–∞–∂–Ω–æ –¥–ª—è Termux
        'recvWindow': 10000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏—è
    },
    'timeout': 30000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
})

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
message_history = {}
last_checked_timestamps = {symbol: 0 for symbol in SYMBOLS.values()}


def format_time(dt):
    return dt.strftime('%Y-%m-%d %H:%M') + ' UTC'


def is_similar(candle1, candle2):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–≤—É—Ö —Å–≤–µ—á–µ–π"""
    if candle1 is None or candle2 is None:
        return False

    change_diff = abs(candle1['change'] - candle2['change']) / max(abs(candle1['change']), 1)
    volume_diff = abs(candle1['volume'] - candle2['volume']) / max(candle1['volume'], 1)

    return (change_diff < 0.2 and volume_diff < 0.3)


def is_candle_closed(candle_timestamp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ —Å–≤–µ—á–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
    now = datetime.now(timezone.utc).timestamp() * 1000
    candle_end_time = candle_timestamp + 15 * 60 * 1000
    return now > candle_end_time


async def get_significant_candle(symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —Å–≤–µ—á–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–∞—Å—Ç–æ—Ç—ã"""
    try:
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        exchange.load_time_difference()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
        candles = await asyncio.to_thread(
            exchange.fetch_ohlcv, symbol, TIMEFRAME, limit=2
        )

        if len(candles) < 2:
            return None

        last_closed_candle = candles[-2]
        candle_timestamp = last_closed_candle[0]

        if candle_timestamp <= last_checked_timestamps[symbol]:
            return None

        last_checked_timestamps[symbol] = candle_timestamp

        if not is_candle_closed(candle_timestamp):
            return None

        change = (last_closed_candle[4] - last_closed_candle[1]) / last_closed_candle[1] * 100

        if abs(change) < MIN_PERCENT_CHANGE:
            return None

        candle_data = {
            'symbol': symbol,
            'time': datetime.fromtimestamp(candle_timestamp / 1000, timezone.utc),
            'open': last_closed_candle[1],
            'high': last_closed_candle[2],
            'low': last_closed_candle[3],
            'close': last_closed_candle[4],
            'change': change,
            'volume': last_closed_candle[5],
            'timestamp': candle_timestamp
        }

        now = datetime.now(timezone.utc)
        last_message = message_history.get(symbol)

        if last_message:
            time_diff = (now - last_message['time']).total_seconds()
            if time_diff < MIN_MESSAGE_INTERVAL and is_similar(last_message['candle'], candle_data):
                return None

        return candle_data

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {str(e)}")
        return None


def create_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä—è–¥–æ–≤"""
    rows = []
    symbols_list = list(SYMBOLS.items())

    for i in range(0, len(symbols_list), 3):  # –ú–µ–Ω—å—à–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        row = [
            InlineKeyboardButton(name, callback_data=f"req_{symbol}")
            for name, symbol in symbols_list[i:i + 3]
        ]
        rows.append(row)

    rows.append([InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu")])

    return InlineKeyboardMarkup(rows)


async def send_candle_message(chat_id, candle_data, application=None, is_update=False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–≤–µ—á–µ"""
    if not candle_data:
        return

    symbol = candle_data['symbol']
    direction = "üü¢" if candle_data['change'] >= 0 else "üî¥"
    symbol_name = symbol.split('/')[0]

    message = (
        f"<b>{direction} {symbol_name} {abs(candle_data['change']):.2f}%</b>\n"
        f"‚îå –í—Ä–µ–º—è: <i>{format_time(candle_data['time'])}</i>\n"
        f"‚îú –¶–µ–Ω–∞: <b>{candle_data['close']:.4f}</b>\n"
        f"‚îú –û–±—ä–µ–º: {candle_data['volume']:.2f} USDT\n"
        f"‚îî –î–∏–∞–ø–∞–∑–æ–Ω: {candle_data['low']:.4f}-{candle_data['high']:.4f}"
    )

    message_history[symbol] = {
        'time': datetime.now(timezone.utc),
        'candle': candle_data
    }

    if not application:
        return

    try:
        if is_update and symbol in message_history and 'message_id' in message_history[symbol]:
            await application.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_history[symbol]['message_id'],
                text=message,
                parse_mode='HTML',
                reply_markup=create_keyboard()
            )
        else:
            sent = await application.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode='HTML',
                reply_markup=create_keyboard()
            )
            message_history[symbol]['message_id'] = sent.message_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        text="üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫—Ä—É–ø–Ω–æ–π —Å–≤–µ—á–∏ (>1.67%):",
        reply_markup=create_keyboard()
    )


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith('req_'):
        symbol = query.data.split('_')[1]
        candle_data = await get_significant_candle(symbol)

        if not candle_data:
            symbol_name = symbol.split('/')[0]
            await query.edit_message_text(
                text=f"‚ùå –î–ª—è {symbol_name} –Ω–µ—Ç —Å–≤–µ—á–µ–π >{MIN_PERCENT_CHANGE}%",
                reply_markup=create_keyboard()
            )
            return

        await send_candle_message(
            chat_id=query.message.chat_id,
            candle_data=candle_data,
            application=context.application,
            is_update=True
        )
    elif query.data == "menu":
        await query.edit_message_text(
            text="üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫—Ä—É–ø–Ω–æ–π —Å–≤–µ—á–∏ (>1.67%):",
            reply_markup=create_keyboard()
        )


async def check_market_updates(application):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä—ã–Ω–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    while True:
        try:
            for symbol in SYMBOLS.values():
                candle_data = await get_significant_candle(symbol)
                if candle_data:
                    await send_candle_message(
                        chat_id=TELEGRAM_CHAT_ID,
                        candle_data=candle_data,
                        application=application,
                        is_update=True
                    )
                await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(CHECK_INTERVAL)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_market_updates: {str(e)}")
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def init_bot(application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    try:
        await application.bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=f"üîî –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ Termux | TF: {TIMEFRAME} | >{MIN_PERCENT_CHANGE}%"
        )
        asyncio.create_task(check_market_updates(application))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")


def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        app = ApplicationBuilder() \
            .token(TELEGRAM_BOT_TOKEN) \
            .post_init(init_bot) \
            .build()

        app.add_handler(CommandHandler('start', start))
        app.add_handler(CallbackQueryHandler(handle_button))

        print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ Termux. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {MIN_PERCENT_CHANGE}%")
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è Termux
        app.run_polling(
            poll_interval=1.0,
            timeout=10,
            drop_pending_updates=True
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
    finally:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    run_bot()
