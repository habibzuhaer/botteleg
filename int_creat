–í–æ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è Termux —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:

core.py

```python
import csv
import os
from datetime import datetime, timezone
import asyncio
from telegram.constants import ParseMode

STATS_FILE = 'candle_stats.csv'
MIN_MESSAGE_INTERVAL = 300  # —Å–µ–∫
MIN_PERCENT_CHANGE = 1.67

TIMEFRAMES = {
    '5m': '5 –º–∏–Ω—É—Ç',
    '15m': '15 –º–∏–Ω—É—Ç',
    '1h': '1 —á–∞—Å'
}

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Termux
SYMBOLS = {
    'BTC': 'BTC/USDT:USDT',
    'ETH': 'ETH/USDT:USDT',
    'BNB': 'BNB/USDT:USDT',
    'SOL': 'SOL/USDT:USDT',
    'XRP': 'XRP/USDT:USDT',
    'ADA': 'ADA/USDT:USDT',
}

message_history = {}
last_checked_timestamps = {}

def save_candle_stats(candle_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤–µ—á—É –≤ CSV"""
    file_exists = os.path.exists(STATS_FILE)
    with open(STATS_FILE, 'a', newline='') as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(['Symbol', 'Timeframe', 'Timestamp', 'Open', 'High', 'Low', 'Close', 'Change', 'Volume'])
        writer.writerow([
            candle_data['symbol'],
            candle_data['timeframe'],
            candle_data['timestamp'],
            candle_data['open'],
            candle_data['high'],
            candle_data['low'],
            candle_data['close'],
            candle_data['change'],
            candle_data['volume']
        ])

def format_candle_message(candle):
    symbol_name = candle['symbol'].split('/')[0]
    tf_label = TIMEFRAMES.get(candle['timeframe'], candle['timeframe'])
    direction = "üü¢" if candle['change'] >= 0 else "üî¥"
    return (
        f"<b>{direction} {symbol_name} {abs(candle['change']):.2f}% ({tf_label})</b>\n"
        f"‚îå –í—Ä–µ–º—è: <i>{format_time(candle['time'])}</i>\n"
        f"‚îú –¶–µ–Ω–∞: <b>{candle['close']:.4f}</b>\n"
        f"‚îú –û–±—ä–µ–º: {candle['volume']:.2f} USDT\n"
        f"‚îî –î–∏–∞–ø–∞–∑–æ–Ω: {candle['low']:.4f}-{candle['high']:.4f}"
    )

def format_time(dt):
    return dt.strftime('%Y-%m-%d %H:%M UTC')

def is_similar(c1, c2):
    if not c1 or not c2:
        return False
    change_diff = abs(c1['change'] - c2['change']) / max(abs(c1['change']), 1)
    volume_diff = abs(c1['volume'] - c2['volume']) / max(c1['volume'], 1)
    return change_diff < 0.2 and volume_diff < 0.3

def is_candle_closed(candle_timestamp, tf_minutes):
    now = datetime.now(timezone.utc).timestamp() * 1000
    end_time = candle_timestamp + tf_minutes * 60 * 1000
    return now > end_time

def get_timeframe_minutes(tf):
    return int(tf[:-1]) if tf.endswith('m') else int(tf[:-1]) * 60

async def get_significant_candles(exchange, symbol, timeframe):
    try:
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è Bybit
        exchange.load_time_difference()
        
        candles = await asyncio.to_thread(exchange.fetch_ohlcv, symbol, timeframe, limit=200)
        if len(candles) < 2:
            return []
        
        tf_minutes = get_timeframe_minutes(timeframe)
        found = []
        
        for i in range(len(candles) - 1):
            c = candles[i]
            timestamp = c[0]
            
            if timestamp <= last_checked_timestamps.get(symbol, {}).get(timeframe, 0):
                continue
                
            if not is_candle_closed(timestamp, tf_minutes):
                continue
                
            change = (c[4] - c[1]) / c[1] * 100
            if abs(change) < MIN_PERCENT_CHANGE:
                continue
                
            data = {
                'symbol': symbol,
                'time': datetime.fromtimestamp(timestamp / 1000, timezone.utc),
                'open': c[1], 'high': c[2], 'low': c[3], 'close': c[4],
                'change': change,
                'volume': c[5],
                'timestamp': timestamp,
                'timeframe': timeframe
            }
            
            now = datetime.now(timezone.utc)
            last = message_history.get(symbol, {}).get(timeframe)
            
            if last and (now - last['time']).total_seconds() < MIN_MESSAGE_INTERVAL and is_similar(last['candle'], data):
                continue
                
            if symbol not in message_history:
                message_history[symbol] = {}
            message_history[symbol][timeframe] = {'time': now, 'candle': data}
            
            if symbol not in last_checked_timestamps:
                last_checked_timestamps[symbol] = {}
            last_checked_timestamps[symbol][timeframe] = timestamp
            
            save_candle_stats(data)
            found.append(data)
            
        return found
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–ª—è {symbol} {timeframe}: {e}")
        return []

async def send_message_about_candle(bot, candle, chat_id, channel_id=None):
    text = format_candle_message(candle)
    await bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
    if channel_id:
        await bot.send_message(chat_id=channel_id, text=text, parse_mode=ParseMode.HTML)

def create_keyboards():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    def main_menu():
        keyboard = [
            [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    return type('obj', (object,), {
        'main_menu': main_menu
    })
```

main.py

```python
import os
import asyncio
import ccxt
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler,
                          CallbackQueryHandler, ContextTypes)

from core import get_significant_candles, send_message_about_candle, SYMBOLS, create_keyboards

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")  # –ù–∞–ø—Ä–∏–º–µ—Ä: -1001234567890
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY", "")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET", "")
CHECK_INTERVAL = 60  # –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è Termux

user_settings = {}
DEFAULT_TIMEFRAME = '15m'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
exchange = ccxt.bybit({
    'apiKey': BYBIT_API_KEY,
    'secret': BYBIT_API_SECRET,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'swap',
        'adjustForTimeDifference': True,
        'recvWindow': 10000,
    },
    'timeout': 30000,
})

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboards = create_keyboards()
    await update.message.reply_text(
        text="üìä –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboards.main_menu()
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "refresh":
        keyboards = create_keyboards()
        await query.edit_message_text(
            text="‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ",
            reply_markup=keyboards.main_menu()
        )

# === –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–∫–∞ ===
async def check_market_loop(app):
    while True:
        try:
            for name, symbol in SYMBOLS.items():
                tf = user_settings.get(symbol, DEFAULT_TIMEFRAME)
                candles = await get_significant_candles(exchange, symbol, tf)
                if candles:
                    last = candles[-1]
                    await send_message_about_candle(app.bot, last, CHAT_ID, CHANNEL_ID)
            await asyncio.sleep(CHECK_INTERVAL)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ check_market_loop: {e}")
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# === –ó–∞–ø—É—Å–∫ ===
def run():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))

    async def on_start(app):
        await app.bot.send_message(chat_id=CHAT_ID, text="üöÄ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ Termux")
        asyncio.create_task(check_market_loop(app))

    app.post_init = on_start
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ Termux")
    app.run_polling()

if __name__ == "__main__":
    run()
```

.env —Ñ–∞–π–ª (–ø—Ä–∏–º–µ—Ä)

```
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
TELEGRAM_CHAT_ID=your_chat_id_here
TELEGRAM_CHANNEL_ID=your_channel_id_here
BYBIT_API_KEY=your_bybit_api_key_here
BYBIT_API_SECRET=your_bybit_api_secret_here
```

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ Termux

1. –û–±–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python:

```bash
pkg update
pkg upgrade
pkg install python python-dev libjpeg-turbo libcrypt ndk-sysroot clang
```

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ Python-–ø–∞–∫–µ—Ç—ã:

```bash
pip install ccxt python-telegram-bot python-dotenv
```

1. –°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–µ–µ:

```bash
mkdir CandleMonitor
cd CandleMonitor
```

1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:

```bash
nano core.py
# –í—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ core.py –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ (Ctrl+X, –∑–∞—Ç–µ–º Y, –∑–∞—Ç–µ–º Enter)

nano main.py
# –í—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ main.py –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ

nano .env
# –í—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Å –≤–∞—à–∏–º–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
```

1. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏:

```bash
chmod +x main.py
```

1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:

```bash
python main.py
```

–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ –≤ Termux

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ tmux:

```bash
pkg install tmux
```

1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏ tmux:

```bash
tmux new-session -s bot
python main.py
# –ù–∞–∂–º–∏—Ç–µ Ctrl+B, –∑–∞—Ç–µ–º D –¥–ª—è –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç —Å–µ—Å—Å–∏–∏
```

1. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏:

```bash
tmux attach-session -t bot
```

1. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞:

```bash
# –í —Å–µ—Å—Å–∏–∏ tmux –Ω–∞–∂–º–∏—Ç–µ Ctrl+C
# –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ:
pkill -f "python main.py"
```

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è Termux

¬∑ –£–≤–µ–ª–∏—á–µ–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
¬∑ –£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
¬∑ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
¬∑ –£–≤–µ–ª–∏—á–µ–Ω—ã —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
¬∑ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è Bybit API

–≠—Ç–æ—Ç –∫–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —á–µ—Ä–µ–∑ Termux –∏ –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.